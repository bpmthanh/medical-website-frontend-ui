Bài 57
1. Luồng Redux trong dự án
  - Cách để React lấy data trong redux
    + mapStateToProps: Nhận vào state của Redux store và trả về một đối tượng chứa các props cần được truyền vào component
    + mapDispatchToProps: Nhận vào hàm dispatch của Redux và trả về một đối tượng chứa các props chứa các hàm dispatch.

Bài 59
1. Xem life circle của component
2. Sequelize migration: npx sequelize-cli db:migrate --to migration-create-user.js

Bài 68
1. Mối quan hệ "hasOne": Mô hình "User" có một quan hệ "hasOne" với mô hình "Profile". Mỗi "User" chỉ có một "Profile", và mỗi "Profile" thuộc về duy nhất một "User".
2. Mối quan hệ "belongsTo": Mô hình "Comment" có một quan hệ "belongsTo" với mô hình "Post". Mỗi "Comment" chỉ thuộc về duy nhất một "Post", và mỗi "Post" có thể có nhiều "Comment".
3. Mối quan hệ "hasMany": Mô hình "Author" có một quan hệ "hasMany" với mô hình "Book". Mỗi "Author" có thể có nhiều "Book" và mỗi "Book" thuộc về duy nhất một "Author".
4. Mối quan hệ "belongsToMany": Mô hình "A" và "B" có mối quan hệ "belongsToMany", thể hiện một mối quan hệ nhiều-nhiều giữa hai mô hình. Mỗi phần tử trong mô hình "A" có thể liên kết với nhiều phần tử trong mô hình "B", và ngược lại. Để thực hiện quan hệ này, cần sử dụng một bảng trung gian để lưu trữ các cặp liên kết giữa "A" và "B".